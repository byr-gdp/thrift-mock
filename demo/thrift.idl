typedef list<i32> Myi32List
// const Myi32List NUM = [1, 2, 3];
// const double PI = 3.14;

// // enum Category {
// //   NEWS = 1,
// //   NOVEL,
// //   POETRY
// // }

struct Article {
  // 1: required i32 id,
  // 2: optional string content,
  3: Myi32List cate
}

// exception IException {
//   1: i32 errno = 500,
//   2: string errmsg = "Server Error..."
// }

union FuzzyRequest {
  1: list<i32> id;
  2: string word;
}

service ArticleService {
  // void ping(1:Myi32List a),
  // Article getArticleById(1:i32 id) throws (1:IException e),
  // list<Article> getAllArticle(),
  // i32 setArticle(1:Article art),
  Article fuzzySearchArticle(1:FuzzyRequest fr)
}











// const list<string> Year = ['2012', '2013', '2014']

// const map<string, list<i32>> FOOD_TYPE_MAP = {
// 	'1': [1, 2],
// 	'2': [2, 3]
// }
// const set<i32> Month = ['1', '2', '3']
// const list<list<string>> A = [['a'], ['b'], ['c']]

// const MyInteger C = 123;

// union ARG {
//   1: list<i32> int_arg;
//   2: i64 long_arg;
// }

// struct Honor2 {
//   1: i32 lista;
// }

// exception IException {
//   1: i32 errno = 500,
//   2: string errmsg = "Server Error..."
// }


// typedef Teacher myTeacher
// typedef list<Teacher> myTeacherList
// typedef list<list<Teacher>> myTeacherList2
// typedef set<Address> myAddressList2
// typedef map<i32, Address> myAddressList3



// struct User {
// 	1: required i32 id = 1;
// 	2: required string name;
// 	// 3: optional Sex sex;
// 	4: double height;
// 	5: Address address;
// 	// 6: list<Honor> honor;
// 	// 7: set<Teacher> allTeacher;
// 	// 8: map<Address, i32> gradeTeacher;
// }

// struct Address {
// 	1: string city = 'beijing', # city comment
// 	2: optional string code, // comment2
// 	3: bool bigCity = 1,
// 	4: i32 test = Sex.MALE
// }



// typedef list<map<i32, string>> mylist

// struct Teacher {
// 	1: mylist id;
// 	2: string name;
// }




// union JavaObjectArg {
//   1: required i32 int_arg;
//   2: i64 long_arg;
//   3: string string_arg;
//   4: bool bool_arg;
//   5: binary binary_arg;
//   6: double double_arg;
// }


// struct Work {
// 	1: required string bizCode;
//   2: optional i32    poiId;
// }

// struct Work {
//   1: optional i32 w,
//   2: required i32 w2,
// }

// struct User {
//   1: i32 id = [{"a": 123}],
//   2: map<i32, Work> b,
//   4: Work id4,
//   // 2: list<i32> id2,
//   // 3: list<set<i32>> id3,
//   // 5: list<Work> id5,
//   // 6: list<set<Work>> id6,
// }





// service MyService {
//   void ping() throws (1:InvalidOperation ouch),
//   list<i32> ping2(),
//   i32 add(1:i32 num1, 2:string num2),
//   i32 calculate(1:i32 logid, 2:Work w) throws (1:InvalidOperation ouch),
//   Work getUser(1:i32 id),
// }


// service Service1 {
//   void ping()
// }

// service Service2 extends Service1 {
//   void ping2()
// }


// union JavaObjectArg {
//   1: i32 int_arg;
//   2: i64 long_arg;
//   3: string string_arg;
//   4: bool bool_arg;
//   5: binary binary_arg;
//   6: double double_arg;
// }


// struct Work {
//   1: i32 w = CUT_TIME,
// }

// exception InvalidOperation {
//   1: i32 errno = 500,
//   2: string errmsg = "Server Error..."
// }


// service Service1 {
//   Work ping(1:i32 num1, 2:string num2) throws (1:InvalidOperation myerr)
// }


// struct Work {
// 	1: required string bizCode;
// }


// service Service2 extends Service1 {
//   void ping2()
// }

